[user]
    name = Yann Thomas-GÃ©rard
    email = inside@gmail.com
[color]
    diff = auto
    status = auto
    branch = auto
	ui = true
[core]
	pager = diff-so-fancy | less --tabs=4 -RFX
    excludesfile = ~/.gitignore_global
[alias]
    cp = cherry-pick
    a = number add
    d = number diff
    dc = number diff --cached
    ; r = number rm
    unstage = number reset HEAD
    ; e = edit
    e = number -c vim
    ; run any git command, for example:
    ; git n add 1
    n = number
    ; this allows commands such as:
    ; git nc cat 1
    ; => execute cat on the first numbered file
    nc = number -c
    g = grep
    ; Push the branch you are on to the remote
    p = push origin HEAD
    pn = push origin HEAD --no-verify
    pfw = push origin HEAD --force-with-lease
    pnfw = push origin HEAD --force-with-lease --no-verify
    l = log
    lo = log --pretty=oneline
    lp = log -p
    lg = log --graph --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ar)%Creset'
    sl = log --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ar)%Creset'
    lpe = log -p  -- . ":(exclude)package-lock.json"
    ; s = status --short
    s = number -s
    ; st = status
    st = number
    br = branch
    co = number checkout
    ci = commit
    ca = commit -a
    caa = commit -a --amend
    caan = commit -a --amend --no-edit
    ru = remote update
    prom = pull --rebase origin master
    rcont = rebase --continue
    c = clone

    ; Checkout branch name from master
    cob = "!f() {\
        if [ -z \"$1\" ];\
        then\
            echo \"Usage: git cob branch_name\";\
            return;\
        fi;\
        git checkout -b "$1" origin/master;\
    }; f"

    ; Fetch git objects and reset hard to master
    rhard = "!git fetch origin && git reset --hard origin/master"
    rh = "reset --hard"

    ; Edit modified file
    edit = "!vim `git diff --name-only`"
    staged = "!vim `git diff --name-only --cached`"
    all = "!vim `git diff --name-only HEAD`"

    flog = number log --name-status
    f = fetch --prune
    cpr = pull-request
    prco = pr checkout

    ; fuzzy pr checkout
    prcof = "!hub pr list |\
        fzf |\
        sed -E 's/^\\s+#([0-9]+).*/\\1/' |\
        xargs --no-run-if-empty --verbose hub pr checkout"

    reuse = commit -eF .git/COMMIT_EDITMSG
    cz = !./node_modules/.bin/git-cz
    cleanup = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"
    bi = bisect
    brshort = branch --format='%(refname:short)'

    ; fuzzy checkout a local branch
    cof = "!git brshort | fzf | xargs --no-run-if-empty --verbose git checkout"

    ; fuzzy checkout a remote branch
    corf = "!git brshort --remotes |\
        fzf |\
        sed -E 's#^origin/([[:alnum:]_-]+)$#\\1 origin/\\1#' |\
        xargs --no-run-if-empty --verbose git checkout -b"

    ; fuzzy add files
    af = "!git ls-files -m -o --exclude-standard |\
        fzf --print0 -m --preview 'git diff {}' --preview-window=top:10:wrap |\
        xargs -0 -t -o git add --all"

    ; fuzzy edit edited files
    ef = !FILES=`git diff --name-only | fzf --multi` && vim ${FILES}
[rerere]
    enabled = true
[merge]
    tool = vimdiff
[mergetool]
    prompt = false
[push]
    default = simple
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "diff"]
	meta = 11
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
[diff]
	tool = vimdiff
